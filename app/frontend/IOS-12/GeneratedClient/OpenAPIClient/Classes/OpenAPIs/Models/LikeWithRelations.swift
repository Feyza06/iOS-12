//
// LikeWithRelations.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** (tsType: LikeWithRelations, schemaOptions: { includeRelations: true }) */
public struct LikeWithRelations: Codable, JSONEncodable, Hashable {

    public var id: Double?
    public var userId: String
    public var postId: String
    public var createdAt: Date

    public init(id: Double? = nil, userId: String, postId: String, createdAt: Date) {
        self.id = id
        self.userId = userId
        self.postId = postId
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case userId
        case postId
        case createdAt
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(userId, forKey: .userId)
        try container.encode(postId, forKey: .postId)
        try container.encode(createdAt, forKey: .createdAt)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(Double.self, forKey: .id)
        userId = try container.decode(String.self, forKey: .userId)
        postId = try container.decode(String.self, forKey: .postId)
        createdAt = try container.decode(Date.self, forKey: .createdAt)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("userId")
        nonAdditionalPropertyKeys.insert("postId")
        nonAdditionalPropertyKeys.insert("createdAt")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

