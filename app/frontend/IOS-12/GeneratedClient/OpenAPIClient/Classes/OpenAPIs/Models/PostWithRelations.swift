//
// PostWithRelations.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** (tsType: PostWithRelations, schemaOptions: { includeRelations: true }) */
public struct PostWithRelations: Codable, JSONEncodable, Hashable {

    public var id: Double?
    public var petName: String
    public var petType: String
    public var petBreed: String
    public var gender: String
    public var photo: Bool
    public var description: String
    public var preferredHome: String
    public var status: String
    public var createdAt: Date
    public var userId: String?
    public var user: UserWithRelations?
    public var foreignKey: AnyCodable?

    public init(id: Double? = nil, petName: String, petType: String, petBreed: String, gender: String, photo: Bool, description: String, preferredHome: String, status: String, createdAt: Date, userId: String? = nil, user: UserWithRelations? = nil, foreignKey: AnyCodable? = nil) {
        self.id = id
        self.petName = petName
        self.petType = petType
        self.petBreed = petBreed
        self.gender = gender
        self.photo = photo
        self.description = description
        self.preferredHome = preferredHome
        self.status = status
        self.createdAt = createdAt
        self.userId = userId
        self.user = user
        self.foreignKey = foreignKey
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case petName
        case petType
        case petBreed
        case gender
        case photo
        case description
        case preferredHome
        case status
        case createdAt
        case userId
        case user
        case foreignKey
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(petName, forKey: .petName)
        try container.encode(petType, forKey: .petType)
        try container.encode(petBreed, forKey: .petBreed)
        try container.encode(gender, forKey: .gender)
        try container.encode(photo, forKey: .photo)
        try container.encode(description, forKey: .description)
        try container.encode(preferredHome, forKey: .preferredHome)
        try container.encode(status, forKey: .status)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(foreignKey, forKey: .foreignKey)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(Double.self, forKey: .id)
        petName = try container.decode(String.self, forKey: .petName)
        petType = try container.decode(String.self, forKey: .petType)
        petBreed = try container.decode(String.self, forKey: .petBreed)
        gender = try container.decode(String.self, forKey: .gender)
        photo = try container.decode(Bool.self, forKey: .photo)
        description = try container.decode(String.self, forKey: .description)
        preferredHome = try container.decode(String.self, forKey: .preferredHome)
        status = try container.decode(String.self, forKey: .status)
        createdAt = try container.decode(Date.self, forKey: .createdAt)
        userId = try container.decodeIfPresent(String.self, forKey: .userId)
        user = try container.decodeIfPresent(UserWithRelations.self, forKey: .user)
        foreignKey = try container.decodeIfPresent(AnyCodable.self, forKey: .foreignKey)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("petName")
        nonAdditionalPropertyKeys.insert("petType")
        nonAdditionalPropertyKeys.insert("petBreed")
        nonAdditionalPropertyKeys.insert("gender")
        nonAdditionalPropertyKeys.insert("photo")
        nonAdditionalPropertyKeys.insert("description")
        nonAdditionalPropertyKeys.insert("preferredHome")
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("createdAt")
        nonAdditionalPropertyKeys.insert("userId")
        nonAdditionalPropertyKeys.insert("user")
        nonAdditionalPropertyKeys.insert("foreignKey")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

