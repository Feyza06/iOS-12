//
// UserFilter1.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserFilter1: Codable, JSONEncodable, Hashable {

    static let offsetRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let limitRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let skipRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var offset: Int?
    public var limit: Int?
    public var skip: Int?
    public var order: LikeFilterOrder?
    public var _where: [String: AnyCodable]?
    public var fields: UserFields?
    public var include: [UserIncludeFilterInner]?

    public init(offset: Int? = nil, limit: Int? = nil, skip: Int? = nil, order: LikeFilterOrder? = nil, _where: [String: AnyCodable]? = nil, fields: UserFields? = nil, include: [UserIncludeFilterInner]? = nil) {
        self.offset = offset
        self.limit = limit
        self.skip = skip
        self.order = order
        self._where = _where
        self.fields = fields
        self.include = include
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case offset
        case limit
        case skip
        case order
        case _where = "where"
        case fields
        case include
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(offset, forKey: .offset)
        try container.encodeIfPresent(limit, forKey: .limit)
        try container.encodeIfPresent(skip, forKey: .skip)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(_where, forKey: ._where)
        try container.encodeIfPresent(fields, forKey: .fields)
        try container.encodeIfPresent(include, forKey: .include)
    }
}

